
*** Selenium ***

Selenium IDE => extensão do Chrome, Firefox e Edge. Grava e reproduz interações com o navegador.

Selenium Grid => usa o Selenium Webdriver para rodar testes em várias máquinas ao mesmo tempo.


*** Selenium Webdriver ***

É uma biblioteca/módulo para interagir com navegadores. Também considerado uma API e usado para 
automatizar testes de GUI.

Manipula navegadores Web nativamente, suportando várias linguagens de programação.

Como funciona...
Temos a parte de automação do código na linguagem escolhida => webdriver  - onde o Selenium vai 
interpretar o código e traduzir em ações no Browser.


*** Mapeamento de Elementos na Tela ***

Tipos de Locators

=> Locators Comuns: Id, Name, Class_Name, Link_Text, Tag_Name, Partial_Link_Text

=> Locators Customizáveis: CSS_Selector (Tag and Id, Tag and Class, Tag and Attribute Tag, 
Class and Attribute Inner Text)
XPATH

Estrutura_Locators

=> Locator ID: está dentro da classe By.ID. Ex: Browser.find_element(By.ID, "Password")
=> Locator Name: está dentro da classe By.NAME. Ex: Browser.find_element(By.NAME, "Password")
=> Locator Link_Text: está dentro da classe By.LINK_TEXT. Ex: Browser.find_element(By.LINK_TEXT, "Twitter")
=> Locator Partial_Link_Text: está dentro da classe By.PARTIAL_LINK_TEXT. Ex: Browser.find_element(By.PARTIAL_LINK_TEXT, "Twi")
=> Locator Class_Name: pode ser comum para mais de um elemento, ou seja, pode ter múltiplos Elementos
utilizando a mesma classe. Ex:Browser.find_element(By.CLASS_NAME, "input_error form_input")
                              Browser.find_elements(By.CLASS_NAME, "input_error form_input")

=> Locator Tag_Name: também pode ser comum para mais de um elemento. Ex:
Browser.find_element(By.TAG_NAME, "input")
Browser.find_elements(By.TAG_NAME, "input")


=> CSS_Selector

Tipos:
- Tag_name#id_value (tag é opcional) - com o ID é usado o separador #
- Tag_name.class_value (tag é opcional) - nesse caso o separador é o ponto (.)
- Tag_name[Attribute=value] (tag é opcional)


*** XPATH ***

O XPATH é uma sintaxe para definir parte de um elemento XML podendo ser usado para 
navegar por elementos e atributos.
O XPATH usa expressões de caminhos para navegar e localizar elementos em uma página
web por meio do DOM.
O XPATH é o endereço de um elemento em uma página.


=> Full e Relative XPATH

- Full XPATH (Absolute XPath): Fornece um caminho completo e absoluto desde a raiz do documento 
até o elemento alvo. EX: /html/body/div/ul/li[3]
Normalmente mais longo e pode ser mais difícil de entender e manter.
Mudanças na estrutura podem invalidar o XPath.
Útil para situações onde a estrutura da página é estável e não muda frequentemente.


- Relative XPATH: Fornece um caminho relativo a um elemento de referência ou ao contexto atual.
EX: //ul/li[3]
Geralmente mais curto e mais fácil de entender.
Menos suscetível a mudanças na estrutura da página.
Mais flexível, permitindo encontrar elementos independentemente da hierarquia completa.
Preferível para a maioria dos casos devido à sua flexibilidade e robustez.


*** Principais Comandos de Navegação do Selenium Webdriver ***

- get(): Navega para a URL especificada. Este comando abre a página web fornecida no navegador.
Exemplo: driver.get("http://exemplo.com")

- maximize_window(): Maximiza a janela do navegador. Exemplo: driver.maximize_window()

- refresh(): : Este comando recarrega a página atual, similar ao pressionar F5 ou clicar no botão 
de recarregar do navegador.
Exemplo: driver.refresh()

- back(): Navega para a página anterior na história do navegador, similar ao botão "Voltar" do navegador.
Exemplo: driver.back()

- forward(): Navega para a próxima página na história do navegador,similar ao botão "Avançar" do navegador.
Exemplo: driver.forward()

- close(): Fecha a janela atual do navegador. Exemplo: driver.close()

- quit(): Fecha todas as janelas do navegador e encerra a sessão do WebDriver.
Exemplo: driver.quit()



*** Principais Comandos da Aplicação ***

- title: Este comando retorna o título da página web que está atualmente carregada no navegador.
Exemplo:
title = driver.title
print(title)  # Imprime o título da página atual

- current_url: Retorna a URL da página web que está atualmente carregada no navegador.
Exemplo:
current_url = driver.current_url
print(current_url)  # Imprime a URL da página atual

- page_source: Retorna o HTML completo da página web que está atualmente carregada no navegador.
Exemplo:
page_source = driver.page_source
print(page_source)  # Imprime o código-fonte HTML da página atual


*** Comandos para Localizar Elementos ***

- find_element(): Localiza e retorna o primeiro elemento que corresponde ao critério de 
busca especificado. Se nenhum elemento for encontrado, lança uma exceção NoSuchElementException.
Utilizado quando se espera encontrar exatamente um elemento ou se deseja interagir com o primeiro 
elemento correspondente.
Exemplo:
# Localizar um elemento pelo ID
element = driver.find_element(By.ID, "element_id")
print(element.text)  # Imprime o texto do elemento


- find_elements(): Localiza e retorna uma lista de todos os elementos que correspondem ao critério 
de busca especificado. Se nenhum elemento for encontrado, retorna uma lista vazia.
Utilizado quando se espera encontrar múltiplos elementos ou quando a presença de elementos é opcional.
Exemplo:
# Localizar múltiplos elementos pela classe
elements = driver.find_elements(By.CLASS_NAME, "element_class")
for element in elements:
    print(element.text)  # Imprime o texto de cada elemento


*** Comandos Condicionais ***

- is_displayed(): Verifica a visibilidade dos elementos, se um elemento está sendo mostrado ou não na tela.

- is_enabled(): Verifica se os botões ou campos de entrada estão ativos, ou seja, se o elemento está 
habilitado ou não.

- is_selected(): Verifica se o elemento está selecionado (checkbox/radio) ou não.

Todos esses elementos retornam True ou False. 
Esses métodos são úteis para garantir que os elementos da página não permaneçam no estado esperado 
antes de realizar ações neles, proporcionando uma maneira mais robusta de interação com a interface 
do usuário durante a automação de testes.


*** Comandos de Interação com Elementos ***

- click(): Simula um clique do mouse em um elemento, é usado para clicar em botões, links, caixas de 
seleção, etc.
Exemplo:
element = driver.find_element(By.ID, "submit_button")
element.click()  # Clica no botão de envio

driver.quit()


- send_keys(): Envia uma sequência de teclas para um elemento, é usado para inserir texto em 
campos de entrada, caixas de texto, etc.
Exemplo:
element = driver.find_element(By.ID, "username")
element.send_keys("meu_nome_de_usuario")  # Insere o texto no campo de entrada

driver.quit()


- text: Obtém o texto visível de um elemento, é usado para recuperar o texto contido em elementos 
como parágrafos, cabeçalhos, etc.
Exemplo:
element = driver.find_element(By.ID, "message")
print(element.text)  # Imprime o texto do elemento

driver.quit()


- get_attribute(): Obtém o valor de um atributo de um elemento, é usado para recuperar valores de 
atributos HTML como id, name, class, href, etc.
Exemplo:
element = driver.find_element(By.ID, "logo")
attribute_value = element.get_attribute("src")
print(attribute_value)  # Imprime o valor do atributo 'src'

driver.quit()


*** Comandos de Espera ***

- time.sleep(): Suspende a execução do script por um período de tempo especificado, utilizado 
para introduzir uma pausa fixa no script, independentemente do estado da página web.
Exemplo:
import time
# Pausar a execução por 5 segundos
time.sleep(5)


- implicit_wait: Define um tempo de espera padrão que o WebDriver deve aguardar ao tentar 
localizar um elemento, se o elemento não estiver imediatamente disponível.Define um tempo de espera 
global para todos os comandos find_element e find_elements.
Exemplo:
from selenium import webdriver

driver = webdriver.Chrome()
driver.implicitly_wait(10)  # Espera até 10 segundos para qualquer elemento aparecer

driver.get("http://exemplo.com")
element = driver.find_element(By.ID, "element_id")

driver.quit()


- explicit_wait: Aguarda até que uma condição específica seja satisfeita antes de continuar a execução,
como visibilidade de um elemento, clicabilidade, etc.
Exemplo:
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

driver = webdriver.Chrome()
driver.get("http://exemplo.com")

# Esperar até que o elemento esteja visível por até 10 segundos
element = WebDriverWait(driver, 10).until(
    EC.visibility_of_element_located((By.ID, "element_id"))
)

driver.quit()


*** IFrames ***

IFrames (Inline Frames) são elementos HTML que permitem a inclusão de outro documento HTML 
dentro do documento principal. Eles são amplamente utilizados para incorporar conteúdo de outras 
fontes, como vídeos, formulários, ou mesmo outras páginas web, dentro da página atual.
No contexto do Selenium WebDriver, trabalhar com IFrames é feito usando o método switch_to.frame(). 
Uma vez que você terminou de interagir com o IFrame, você pode voltar para o contexto principal com 
switch_to.default_content().


*** Pytest ***

Pytest é um framework de teste que permite escrever códigos de teste usando a linguagem Python.
Ele ajuda a escrever casos de teste simples e escaláveis para banco de dados, APIs ou interface do
usuário.

Algumas vantagens do Pytest são:
- Muito fácil de começar a usar devido a sua sintaxe simples
- Pode executar testes em paralelo
- Pode detectar testes automaticamente
- Pode ignorar testes

O Pytest identifica quais são os casos de testes automaticamente desde que o nome dos métodos de 
teste estejam no seguinte formato: test_*.py ou *_test.py


*** Principais Comandos e Funções ***

- conftest.py: é um arquivo especial em pytest que permite definir fixtures e hooks de configuração 
que podem ser usados em múltiplos arquivos de teste. Ele é automaticamente descoberto pelo pytest.
Serve para compartilhar fixtures e configurações de testes em vários arquivos sem a necessidade de 
importação explícita.
Como usar: você coloca o arquivo conftest.py no diretório dos testes. O pytest automaticamente o detecta e 
disponibiliza as fixtures e hooks definidos nele para todos os arquivos de teste naquele diretório e 
subdiretórios.


- fixtures: são funções que podem ser usadas para configurar um ambiente de teste antes da execução 
dos testes e fazer limpeza após os testes. Elas fornecem uma maneira de criar objetos reutilizáveis para 
testes.
Serve para preparar e fornecer qualquer configuração necessária aos testes, como inicializar variáveis, 
preparar banco de dados, ou configurar mocks.
Como Usar: defina uma função com o decorador @pytest.fixture. Essa função pode então ser usada como 
argumento em funções de teste.

Escopos de Fixtures:

function (padrão): A fixture é criada para cada função de teste.
class: A fixture é criada uma vez por classe de teste.
module: A fixture é criada uma vez por módulo de teste.
package: A fixture é criada uma vez por pacote de teste.
session: A fixture é criada uma vez por sessão de teste.


- marks: são anotações que você pode usar para marcar suas funções de teste. Eles permitem que você 
categorize, selecione ou ignore testes com base em determinados critérios.
Serve para executar subconjuntos de testes, marcar testes que precisam ser executados de maneira especial
ou ignorar temporariamente testes que não devem ser executados.
Como Usar: use o decorador @pytest.mark.<nome_do_mark> para marcar uma função de teste. Pode ser usado 
com -m para selecionar testes na linha de comando.


*** Page Object (POM) ***

Definição: É um padrão de design utilizado em testes de automação para criar uma camada de abstração 
entre os testes e a interface do usuário (UI) da aplicação. Em vez de interagir diretamente com a UI nos 
testes, você cria classes que representam as páginas ou componentes da UI. Essas classes encapsulam a 
lógica de interação com os elementos da página.

Para que é Usado:

- Manutenção Simplificada: Separar a lógica de teste da lógica de interação com a UI facilita a manutenção. 
Se a UI mudar, você só precisa atualizar a classe do Page Object correspondente, e não todos os testes.
- Reusabilidade: Permite reutilizar a lógica de interação com a UI em múltiplos testes.
- Legibilidade: Os testes se tornam mais legíveis e fáceis de entender, pois a lógica de interação com a 
UI está encapsulada em métodos bem definidos.
- Redução de Código Duplicado: Centraliza a lógica de interação com elementos da UI, evitando duplicação 
de código nos testes.


*** Pdb ***

É o depurador interativo para programas Python. Ele permite que você execute seu programa passo a passo, 
inspecione variáveis, defina pontos de interrupção e siga o fluxo de execução, o que facilita encontrar 
e corrigir bugs no código.

Como Usar pdb
Você pode usar pdb de várias maneiras, incluindo:

Executando diretamente na linha de comando.
Inserindo um ponto de interrupção no código.
Usando o pytest com a opção --pdb.

Comandos Básicos do pdb
Uma vez dentro do modo de depuração, você pode usar uma série de comandos para navegar pelo código e 
inspecionar o estado do programa. Aqui estão alguns dos comandos mais úteis:

n (next): Executa a próxima linha de código, mas não entra em funções chamadas.
s (step): Executa a próxima linha de código e entra em funções chamadas.
c (continue): Continua a execução até o próximo ponto de interrupção.
l (list): Mostra o código ao redor da linha atual.
p (print): Avalia e imprime a expressão fornecida.
q (quit): Sai do depurador e do programa.


*** Trace ***

O uso da opção --trace com pytest é uma prática essencial para depuração aprofundada, especialmente 
quando se trata de problemas difíceis de diagnóstico. 
É uma ferramenta de depuração que coloca o pytest de modo interativo usando o depurador pdb. Isso 
permite que você inspecione o código antes e durante a execução dos testes, linha por linha, fornecendo 
uma maneira detalhada de acompanhar a execução e entender o comportamento do código.

Vantagens do Uso do--trace
Controle Fino : Permite inspeção e controle detalhado do fluxo de execução do teste.
Diagnóstico Eficiente : A capacidade de parar e funcionar o estado do programa em pontos específicos 
facilita a identificação de bugs.
Entendimento do Fluxo : Ajuda a entender como o código é executado e como as diferentes partes do 
código interagem.


*** Breakpoint ***

O breakpoint() é uma função embutida em Python, que serve para iniciar o depurador interativo, como pdb, 
no ponto em que é chamado. É uma maneira conveniente de inspecionar o estado do programa e depurar 
problemas durante a execução.

Quando se trabalha com Selenium para automação de navegadores, você pode usar breakpoint() para pausar 
a execução do script em um ponto específico, permitindo inspecionar o estado do navegador, os elementos 
da página, e as variáveis em uso. Isso é útil para verificar se os elementos foram corretamente 
localizados ou para inspecionar as ações realizadas pelo script até aquele momento.


*** WebDriverManager ***

O WebDriverManager é uma ferramenta que simplifica o processo de configuração dos drivers para diferentes 
navegadores ao usar Selenium WebDriver. Normalmente, ao trabalhar com Selenium, você precisa baixar 
manualmente o driver do navegador (como ChromeDriver, GeckoDriver, etc.) e configurá-lo no PATH do 
sistema ou fornecer o caminho para o driver no código. 
O WebDriverManager automatiza esse processo, baixando e gerenciando automaticamente as versões 
apropriadas dos drivers necessários para o navegador que você está utilizando.

Como Usar o WebDriverManager
O WebDriverManager pode ser integrado com Selenium em Python através da biblioteca webdriver_manager. 

Instalação:
pip install webdriver_manager

Utilização com Selenium

from selenium import webdriver
from selenium.webdriver.common.by import By
from webdriver_manager.chrome import ChromeDriverManager

# Configuração do WebDriver para o Chrome
driver = webdriver.Chrome(ChromeDriverManager().install())

try:
    # Navegar para uma página de exemplo
    driver.get("https://example.com")

    # Interagir com elementos da página
    element = driver.find_element(By.TAG_NAME, 'h1')
    print(element.text)
finally:
    # Fechar o navegador
    driver.quit()

Explicação do Código
Importações:
webdriver: Importa o módulo Selenium para controle do navegador.
By: Fornece localizadores de elementos.
ChromeDriverManager: Um gerenciador específico para o ChromeDriver, parte do webdriver_manager.

Inicialização do WebDriver:

ChromeDriverManager().install() baixa automaticamente o ChromeDriver necessário e retorna o caminho 
do driver instalado. O método install() verifica a versão do navegador instalada e baixa a versão 
correspondente do driver, se necessário.
Uso do Driver:

driver.get("https://example.com") abre a página desejada.
driver.find_element(By.TAG_NAME, 'h1') localiza o elemento <h1> na página.
O texto do elemento é impresso.
Finalização:

driver.quit() fecha o navegador.


*** Atualização de pacotes já instalados ***

O comando geral para atualizar um pacote é:

pip install --upgrade <nome_do_pacote>

Se você quiser atualizar o pacote requests para a versão mais recente disponível, você pode usar 
o seguinte comando:

pip install --upgrade requests

Antes de atualizar, pode ser útil verificar a versão atualmente instalada de um pacote. 
Isso pode ser feito usando o comando:

pip show <nome_do_pacote>

Se você deseja atualizar todos os pacotes instalados em um ambiente, pode usar o seguinte comando:

pip list --outdated --format=freeze | grep -v '^\-e' | cut -d = -f 1 | xargs -n1 pip install -U