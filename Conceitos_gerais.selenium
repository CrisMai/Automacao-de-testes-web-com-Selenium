
*** Selenium ***

Selenium IDE => extensão do Chrome, Firefox e Edge. Grava e reproduz interações com o navegador.

Selenium Grid => usa o Selenium Webdriver para rodar testes em várias máquinas ao mesmo tempo.


*** Selenium Webdriver ***

É uma biblioteca/módulo para interagir com navegadores. Também considerado uma API e usado para 
automatizar testes de GUI.

Manipula navegadores Web nativamente, suportando várias linguagens de programação.

Como funciona...
Temos a parte de automação do código na linguagem escolhida => webdriver  - onde o Selenium vai 
interpretar o código e traduzir em ações no Browser.


*** Mapeamento de Elementos na Tela ***

Tipos de Locators

=> Locators Comuns: Id, Name, Class_Name, Link_Text, Tag_Name, Partial_Link_Text

=> Locators Customizáveis: CSS_Selector (Tag and Id, Tag and Class, Tag and Attribute Tag, 
Class and Attribute Inner Text)
XPATH

Estrutura_Locators

=> Locator ID: está dentro da classe By.ID. Ex: Browser.find_element(By.ID, "Password")
=> Locator Name: está dentro da classe By.NAME. Ex: Browser.find_element(By.NAME, "Password")
=> Locator Link_Text: está dentro da classe By.LINK_TEXT. Ex: Browser.find_element(By.LINK_TEXT, "Twitter")
=> Locator Partial_Link_Text: está dentro da classe By.PARTIAL_LINK_TEXT. Ex: Browser.find_element(By.PARTIAL_LINK_TEXT, "Twi")
=> Locator Class_Name: pode ser comum para mais de um elemento, ou seja, pode ter múltiplos Elementos
utilizando a mesma classe. Ex:Browser.find_element(By.CLASS_NAME, "input_error form_input")
                              Browser.find_elements(By.CLASS_NAME, "input_error form_input")

=> Locator Tag_Name: também pode ser comum para mais de um elemento. Ex:
Browser.find_element(By.TAG_NAME, "input")
Browser.find_elements(By.TAG_NAME, "input")


=> CSS_Selector

Tipos:
- Tag_name#id_value (tag é opcional) - com o ID é usado o separador #
- Tag_name.class_value (tag é opcional) - nesse caso o separador é o ponto (.)
- Tag_name[Attribute=value] (tag é opcional)


*** XPATH ***

O XPATH é uma sintaxe para definir parte de um elemento XML podendo ser usado para 
navegar por elementos e atributos.
O XPATH usa expressões de caminhos para navegar e localizar elementos em uma página
web por meio do DOM.
O XPATH é o endereço de um elemento em uma página.


=> Full e Relative XPATH

- Full XPATH (Absolute XPath): Fornece um caminho completo e absoluto desde a raiz do documento 
até o elemento alvo. EX: /html/body/div/ul/li[3]
Normalmente mais longo e pode ser mais difícil de entender e manter.
Mudanças na estrutura podem invalidar o XPath.
Útil para situações onde a estrutura da página é estável e não muda frequentemente.


- Relative XPATH: Fornece um caminho relativo a um elemento de referência ou ao contexto atual.
EX: //ul/li[3]
Geralmente mais curto e mais fácil de entender.
Menos suscetível a mudanças na estrutura da página.
Mais flexível, permitindo encontrar elementos independentemente da hierarquia completa.
Preferível para a maioria dos casos devido à sua flexibilidade e robustez.


*** Principais Comandos de Navegação do Selenium Webdriver ***

- get(): Navega para a URL especificada. Este comando abre a página web fornecida no navegador.
Exemplo: driver.get("http://exemplo.com")

- maximize_window(): Maximiza a janela do navegador. Exemplo: driver.maximize_window()

- refresh(): : Este comando recarrega a página atual, similar ao pressionar F5 ou clicar no botão 
de recarregar do navegador.
Exemplo: driver.refresh()

- back(): Navega para a página anterior na história do navegador, similar ao botão "Voltar" do navegador.
Exemplo: driver.back()

- forward(): Navega para a próxima página na história do navegador,similar ao botão "Avançar" do navegador.
Exemplo: driver.forward()

- close(): Fecha a janela atual do navegador. Exemplo: driver.close()

- quit(): Fecha todas as janelas do navegador e encerra a sessão do WebDriver.
Exemplo: driver.quit()



*** Principais Comandos da Aplicação ***

- title:Este comando retorna o título da página web que está atualmente carregada no navegador.
Exemplo:
title = driver.title
print(title)  # Imprime o título da página atual

- current_url: Retorna a URL da página web que está atualmente carregada no navegador.
Exemplo:
current_url = driver.current_url
print(current_url)  # Imprime a URL da página atual

- page_source: Retorna o HTML completo da página web que está atualmente carregada no navegador.
Exemplo:
page_source = driver.page_source
print(page_source)  # Imprime o código-fonte HTML da página atual